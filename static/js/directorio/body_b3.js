;(function () {   const blockId = '44351bb2-6e5c-4fcc-fd58-15fe30b29a81';  const collectionSetup = JSON.parse(`{"dataSourceTypes":["airtable","softr","gsheet"],"dataSource":{"type":"airtable","airtable":{"url":"https://api.airtable.com/v0/app5Pu2MOqzZxmf4c/Directorio","baseId":"app5Pu2MOqzZxmf4c","tableName":"Directorio","viewName":""},"softr":{"applicationId":"1f37011c-bdff-48c6-8a6b-d2f777aab051","collectionId":""},"gsheet":{}},"defaultFilter":"ALL","customFilters":{"logical_operator":"OR","conditions":[]},"itemsPerPage":12,"itemsPerRow":"4","sortOptions":[{"field":"","direction":"","isDefault":true}],"searchOptions":{"fields":["Name"]},"listItemClickAction":{"supportedActionTypes":["DO_NOTHING","OPEN_DYNAMIC_EXTERNAL_URL","OPEN_DETAILS_PAGE"],"selectedActionType":"OPEN_DETAILS_PAGE","action":{"type":"navigate","options":{"url":{"destination":"","mappedTo":"","target":""}}}},"mockData":[{"staticImage":{"value":["https://softr-assets-eu-shared.s3.eu-central-1.amazonaws.com/studio/blocks/assets/testimonial_profile_picture_1.png"]},"image":{"value":["https://softr-assets-eu-shared.s3.eu-central-1.amazonaws.com/studio/blocks/assets/testimonial_profile_picture_1.png"]},"text":{"value":"Single line short text"},"heading1":{"value":"Heading1"},"heading2":{"value":"Heading2"},"heading3":{"value":"Heading3"},"rich_text":{"value":"Proxima bellare te tractata Atrides exercet  <br> <ul> <li> Lorem markdownum, aequent vocem dixit tamen quidem crimine in maris protinus moror <b>telluris</b> magno, marinae Latonae.</li> <li> Opaca tamquam ligari! </li> </ul>"},"embed":{"value":"<iframe width='100%' height='100%' src='https://player.vimeo.com/video/252443587' frameborder='0' allowfullscreen></iframe>"},"gmaps":{"value":"<iframe width='100%' height='100%' src='https://www.google.com/c/search/?api=1&query=47.5951518,-122.3316393&query_place_id=ChIJKxjxuaNqkFQR3CK6O1HNNqY' frameborder='0' allowfullscreen></iframe>"},"url":{"value":"https://www.example.com"},"email":{"value":"emailTo@example.com"},"rating":{"value":"4"},"tag":{"value":["Tag 1","Tag 2"]},"button":{"value":"https://example.com"},"file":{"value":[{"filename":"File 1","url":"https://softr-assets-eu-shared.s3.eu-central-1.amazonaws.com/studio/blocks/assets/video2_stock_video_1.mp4"}],"label":{"value":"Download"}},"video":{"value":"https://softr-assets-eu-shared.s3.eu-central-1.amazonaws.com/studio/blocks/assets/video2_stock_video_1.mp4"},"divider":{"value":""},"audio":{"value":"https://softr-assets-eu-shared.s3.eu-central-1.amazonaws.com/studio/blocks/assets/placeholder_audio.mp3"},"gallery":{"value":["https://softr-assets-eu-shared.s3.eu-central-1.amazonaws.com/studio/blocks/assets/gallery_pic1.jpg","https://softr-assets-eu-shared.s3.eu-central-1.amazonaws.com/studio/blocks/assets/gallery_pic2.jpg","https://softr-assets-eu-shared.s3.eu-central-1.amazonaws.com/studio/blocks/assets/gallery_pic3.jpg"]}}],"possibleItemsPerPage":[{"value":6}]}`);  const loadMoreButtonSelector = '#list0 .sw-js-list-load-more-btn';  const searchInputSelector = '#list0 .sw-js-list-search-input';  const listContainerSelector = '#list0 .sw-js-list-container';  const listFilterSelector = '#list0 .js-filter';  const emptyStateSelector = '#list0 .sw-js-list-empty-state';  const fieldsSetup = JSON.parse(`[{"label":{"tag":"p","primaryStyles":[{"name":"size-color","label":"Text Size/Color","isPrimary":true,"classes":["sw-font-size-s","sw-text-color-8a8a8a"]},{"name":"font-family","label":"Font family","isPrimary":true,"classes":["sw-font-family-default"]},{"name":"font-weight","label":"Font weight","isPrimary":true,"classes":["sw-font-weight-semibold"]},{"name":"text-alignment","label":"Alignment","isPrimary":true,"classes":["sw-text-align-left"]},{"name":"letter-spacing","label":"Letter spacing","isPrimary":true,"classes":["sw-letter-spacing-widest"]},{"name":"padding-top-bottom","label":"Padding top/bottom","isPrimary":true,"classes":["sw-padding-top-6xs","sw-padding-bottom-none"]},{"name":"padding-left-right","label":"Padding left/right","isPrimary":true,"classes":["sw-padding-left-6xs","sw-padding-right-6xs"]}],"otherStyles":[{"name":"others","label":"Other","isPrimary":true,"classes":[]}],"value":""},"field":{"tag":"div","primaryStyles":[{"name":"height","label":"Size","isPrimary":true,"classes":["sw-height-4xs"]},{"name":"background-size","label":"Background Size","isPrimary":true,"classes":["sw-background-size-cover"]},{"name":"border","label":"Border","isPrimary":true,"classes":["sw-border-style-solid","sw-border-width-xs","sw-border-color-f4f2f2"]},{"name":"border-radius","label":"Roundness","classes":["sw-border-radius-none"]}],"otherStyles":[{"name":"others","label":"Other","isPrimary":true,"classes":[]}],"value":"","alt":"","type":"staticImage","id":"_htaykdl44","mappedTo":"Image","deletable":false,"enabled":true}},{"label":{"tag":"p","primaryStyles":[{"name":"size-color","label":"Text Size/Color","isPrimary":true,"classes":["sw-font-size-s","sw-text-color-8a8a8a"]},{"name":"font-family","label":"Font family","isPrimary":true,"classes":["sw-font-family-default"]},{"name":"font-weight","label":"Font weight","isPrimary":true,"classes":["sw-font-weight-semibold"]},{"name":"text-alignment","label":"Alignment","isPrimary":true,"classes":["sw-text-align-left"]},{"name":"letter-spacing","label":"Letter spacing","isPrimary":true,"classes":["sw-letter-spacing-widest"]},{"name":"padding-top-bottom","label":"Padding top/bottom","isPrimary":true,"classes":["sw-padding-top-6xs","sw-padding-bottom-none"]},{"name":"padding-left-right","label":"Padding left/right","isPrimary":true,"classes":["sw-padding-left-6xs","sw-padding-right-6xs"]}],"otherStyles":[{"name":"others","label":"Other","isPrimary":true,"classes":[]}],"value":""},"field":{"tag":"p","primaryStyles":[{"name":"size-color","label":"Text Size/Color","isPrimary":true,"classes":["sw-font-size-l","sw-text-color-7710d2"]},{"name":"font-family","label":"Font family","isPrimary":true,"classes":["sw-font-family-default"]},{"name":"font-weight","label":"Font weight","isPrimary":true,"classes":["sw-font-weight-semibold"]},{"name":"text-alignment","label":"Alignment","isPrimary":true,"classes":["sw-text-align-left"]},{"name":"letter-spacing","label":"Letter spacing","isPrimary":true,"classes":["sw-letter-spacing-normal"]},{"name":"padding-top-bottom","label":"Padding top/bottom","isPrimary":true,"classes":["sw-padding-top-3xs","sw-padding-bottom-5xs"]},{"name":"padding-left-right","label":"Padding left/right","isPrimary":true,"classes":["sw-padding-left-3xs","sw-padding-right-6xs"]}],"value":"","type":"heading1","id":"_i7sulsj9u","mappedTo":"Empresa","deletable":false,"enabled":true}},{"label":{"tag":"p","primaryStyles":[{"name":"size-color","label":"Text Size/Color","isPrimary":true,"classes":["sw-font-size-s","sw-text-color-8a8a8a"]},{"name":"font-family","label":"Font family","isPrimary":true,"classes":["sw-font-family-default"]},{"name":"font-weight","label":"Font weight","isPrimary":true,"classes":["sw-font-weight-semibold"]},{"name":"text-alignment","label":"Alignment","isPrimary":true,"classes":["sw-text-align-left"]},{"name":"letter-spacing","label":"Letter spacing","isPrimary":true,"classes":["sw-letter-spacing-widest"]},{"name":"padding-top-bottom","label":"Padding top/bottom","isPrimary":true,"classes":["sw-padding-top-6xs","sw-padding-bottom-none"]},{"name":"padding-left-right","label":"Padding left/right","isPrimary":true,"classes":["sw-padding-left-6xs","sw-padding-right-6xs"]}],"otherStyles":[{"name":"others","label":"Other","isPrimary":true,"classes":[]}],"value":""},"field":{"tag":"p","primaryStyles":[{"name":"size-color","label":"Text Size/Color","isPrimary":true,"classes":["sw-font-size-s","sw-text-color-757575"]},{"name":"font-family","label":"Font family","isPrimary":true,"classes":["sw-font-family-default"]},{"name":"font-weight","label":"Font weight","isPrimary":true,"classes":["sw-font-weight-normal"]},{"name":"text-alignment","label":"Alignment","isPrimary":true,"classes":["sw-text-align-left"]},{"name":"letter-spacing","label":"Letter spacing","isPrimary":true,"classes":["sw-letter-spacing-normal"]},{"name":"padding-top-bottom","label":"Padding top/bottom","isPrimary":true,"classes":["sw-padding-top-7xs","sw-padding-bottom-3xs"]},{"name":"padding-left-right","label":"Padding left/right","isPrimary":true,"classes":["sw-padding-left-3xs","sw-padding-right-6xs"]}],"value":"","type":"text","id":"_i7sulsj9u12","mappedTo":"Descripci√≥n","deletable":false,"enabled":true}},{"label":{"tag":"p","primaryStyles":[{"name":"size-color","label":"Text Size/Color","isPrimary":true,"classes":["sw-font-size-s","sw-text-color-8a8a8a"]},{"name":"font-family","label":"Font family","isPrimary":true,"classes":["sw-font-family-default"]},{"name":"font-weight","label":"Font weight","isPrimary":true,"classes":["sw-font-weight-semibold"]},{"name":"text-alignment","label":"Alignment","isPrimary":true,"classes":["sw-text-align-left"]},{"name":"letter-spacing","label":"Letter spacing","isPrimary":true,"classes":["sw-letter-spacing-widest"]},{"name":"padding-top-bottom","label":"Padding top/bottom","isPrimary":true,"classes":["sw-padding-top-6xs","sw-padding-bottom-none"]},{"name":"padding-left-right","label":"Padding left/right","isPrimary":true,"classes":["sw-padding-left-6xs","sw-padding-right-6xs"]}],"otherStyles":[{"name":"others","label":"Other","isPrimary":true,"classes":[]}],"value":""},"field":{"tag":"p","primaryStyles":[{"name":"size-color","label":"Text Size/Color","isPrimary":true,"classes":["sw-font-size-s","sw-text-color-333333"]},{"name":"font-family","label":"Font family","isPrimary":true,"classes":["sw-font-family-default"]},{"name":"font-weight","label":"Font weight","isPrimary":true,"classes":["sw-font-weight-normal"]},{"name":"text-alignment","label":"Alignment","isPrimary":true,"classes":["sw-text-align-left"]},{"name":"letter-spacing","label":"Letter spacing","isPrimary":true,"classes":["sw-letter-spacing-normal"]},{"name":"padding-top-bottom","label":"Padding top/bottom","isPrimary":true,"classes":["sw-padding-top-none","sw-padding-bottom-5xs"]},{"name":"padding-left-right","label":"Padding left/right","isPrimary":true,"classes":["sw-padding-left-6xs","sw-padding-right-6xs"]}],"value":"","type":"text","id":"_kbtr0o72812","mappedTo":"Direcci√≥n","deletable":false,"enabled":true}},{"label":{"tag":"p","primaryStyles":[{"name":"size-color","label":"Text Size/Color","isPrimary":true,"classes":["sw-font-size-s","sw-text-color-8a8a8a"]},{"name":"font-family","label":"Font family","isPrimary":true,"classes":["sw-font-family-default"]},{"name":"font-weight","label":"Font weight","isPrimary":true,"classes":["sw-font-weight-semibold"]},{"name":"text-alignment","label":"Alignment","isPrimary":true,"classes":["sw-text-align-left"]},{"name":"letter-spacing","label":"Letter spacing","isPrimary":true,"classes":["sw-letter-spacing-widest"]},{"name":"padding-top-bottom","label":"Padding top/bottom","isPrimary":true,"classes":["sw-padding-top-6xs","sw-padding-bottom-none"]},{"name":"padding-left-right","label":"Padding left/right","isPrimary":true,"classes":["sw-padding-left-6xs","sw-padding-right-6xs"]}],"otherStyles":[{"name":"others","label":"Other","isPrimary":true,"classes":[]}],"value":""},"field":{"tag":"p","primaryStyles":[{"name":"size-color","label":"Text Size/Color","isPrimary":true,"classes":["sw-font-size-s","sw-text-color-333333"]},{"name":"font-family","label":"Font family","isPrimary":true,"classes":["sw-font-family-default"]},{"name":"font-weight","label":"Font weight","isPrimary":true,"classes":["sw-font-weight-normal"]},{"name":"text-alignment","label":"Alignment","isPrimary":true,"classes":["sw-text-align-left"]},{"name":"letter-spacing","label":"Letter spacing","isPrimary":true,"classes":["sw-letter-spacing-normal"]},{"name":"padding-top-bottom","label":"Padding top/bottom","isPrimary":true,"classes":["sw-padding-top-none","sw-padding-bottom-5xs"]},{"name":"padding-left-right","label":"Padding left/right","isPrimary":true,"classes":["sw-padding-left-6xs","sw-padding-right-6xs"]}],"value":"","type":"text","id":"_qdr24kkgn","mappedTo":"Tel√©fono","deletable":true,"enabled":true}},{"label":{"tag":"p","primaryStyles":[{"name":"size-color","label":"Text Size/Color","isPrimary":true,"classes":["sw-font-size-s","sw-text-color-8a8a8a"]},{"name":"font-family","label":"Font family","isPrimary":true,"classes":["sw-font-family-default"]},{"name":"font-weight","label":"Font weight","isPrimary":true,"classes":["sw-font-weight-semibold"]},{"name":"text-alignment","label":"Alignment","isPrimary":true,"classes":["sw-text-align-left"]},{"name":"letter-spacing","label":"Letter spacing","isPrimary":true,"classes":["sw-letter-spacing-widest"]},{"name":"padding-top-bottom","label":"Padding top/bottom","isPrimary":true,"classes":["sw-padding-top-6xs","sw-padding-bottom-none"]},{"name":"padding-left-right","label":"Padding left/right","isPrimary":true,"classes":["sw-padding-left-6xs","sw-padding-right-6xs"]}],"otherStyles":[{"name":"others","label":"Other","isPrimary":true,"classes":[]}],"value":""},"field":{"tag":"div","primaryStyles":[{"name":"size-color","label":"Text Size/Color","isPrimary":true,"classes":["sw-font-size-s","sw-text-color-333333"]},{"name":"font-family","label":"Font family","isPrimary":true,"classes":["sw-font-family-default"]},{"name":"font-weight","label":"Font weight","isPrimary":true,"classes":["sw-font-weight-normal"]},{"name":"text-alignment","label":"Alignment","isPrimary":true,"classes":["sw-text-align-left"]},{"name":"letter-spacing","label":"Letter spacing","isPrimary":true,"classes":["sw-letter-spacing-normal"]},{"name":"padding-top-bottom","label":"Padding top/bottom","isPrimary":true,"classes":["sw-padding-top-none","sw-padding-bottom-6xs"]},{"name":"padding-left-right","label":"Padding left/right","isPrimary":true,"classes":["sw-padding-left-6xs","sw-padding-right-6xs"]}],"value":"","type":"email","id":"_uzllkpfso","mappedTo":"email","deletable":true,"enabled":true}},{"label":{"tag":"p","primaryStyles":[{"name":"size-color","label":"Text Size/Color","isPrimary":true,"classes":["sw-font-size-2xs","sw-text-color-8a8a8a"]},{"name":"font-family","label":"Font family","isPrimary":true,"classes":["sw-font-family-default"]},{"name":"font-weight","label":"Font weight","isPrimary":true,"classes":["sw-font-weight-semibold"]},{"name":"text-alignment","label":"Alignment","isPrimary":true,"classes":["sw-text-align-left"]},{"name":"letter-spacing","label":"Letter spacing","isPrimary":true,"classes":["sw-letter-spacing-widest"]},{"name":"padding-top-bottom","label":"Padding top/bottom","isPrimary":true,"classes":["sw-padding-top-6xs","sw-padding-bottom-none"]},{"name":"padding-left-right","label":"Padding left/right","isPrimary":true,"classes":["sw-padding-left-6xs","sw-padding-right-6xs"]}],"otherStyles":[{"name":"others","label":"Other","isPrimary":true,"classes":[]}],"value":""},"field":{"tag":"p","primaryStyles":[{"name":"size-color","label":"Text Size/Color","isPrimary":true,"classes":["sw-font-size-s","sw-text-color-333333"]},{"name":"font-family","label":"Font family","isPrimary":true,"classes":["sw-font-family-default"]},{"name":"font-weight","label":"Font weight","isPrimary":true,"classes":["sw-font-weight-normal"]},{"name":"text-alignment","label":"Alignment","isPrimary":true,"classes":["sw-text-align-left"]},{"name":"letter-spacing","label":"Letter spacing","isPrimary":true,"classes":["sw-letter-spacing-normal"]},{"name":"padding-top-bottom","label":"Padding top/bottom","isPrimary":true,"classes":["sw-padding-top-none","sw-padding-bottom-6xs"]},{"name":"padding-left-right","label":"Padding left/right","isPrimary":true,"classes":["sw-padding-left-6xs","sw-padding-right-6xs"]}],"value":"","type":"url","id":"_odq6ie9cz","mappedTo":"Sitio web","deletable":true,"enabled":true}}]`);  $('#list0 select').hide();  let recordId = getUrlParam('recordId');  showLoader();   function loadLitepickerMobileFriendlyPlugin() {   appendScript('https://cdn.jsdelivr.net/npm/litepicker@2.0.11/dist/plugins/mobilefriendly.js');  }   function getCurrentTimestamp() {   return Math.round(new Date().getTime()/1000);  }   loaddoTJs(function () {    loadShowdownJs(function () {    setupdotJs();    /* Load More Event Handler */    $(loadMoreButtonSelector).click(function (e) {     e.preventDefault();     loadMore();    });     $(searchInputSelector).keyup(debounce(function () {     performSearch($(this).val());    }, 500));     attachFilterListeners();     $('#list0').bind('performFilter', performFilter);     /* getAirtableData(renderAirtableData, {renderMockData: true}); */    appendStyle('https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.14/dist/css/bootstrap-select.min.css');    appendScript('https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.14/dist/js/bootstrap-select.min.js', initSelectPickers);     appendStyle('https://cdnjs.cloudflare.com/ajax/libs/toastr.js/2.1.4/toastr.min.css');    appendScript('https://cdnjs.cloudflare.com/ajax/libs/toastr.js/2.1.4/toastr.min.js');     appendStyle('https://cdnjs.cloudflare.com/ajax/libs/magnific-popup.js/1.0.0/magnific-popup.min.css');    appendScript('https://cdnjs.cloudflare.com/ajax/libs/magnific-popup.js/1.0.0/jquery.magnific-popup.js');     appendStyle('https://cdn.jsdelivr.net/npm/litepicker@2.0.11/dist/css/litepicker.css');    appendScript('https://cdn.jsdelivr.net/npm/litepicker@2.0.11/dist/litepicker.js', loadLitepickerMobileFriendlyPlugin);     appendStyle('https://uicdn.toast.com/editor/3.1.3/toastui-editor.min.css');    appendScript('https://uicdn.toast.com/editor/3.1.3/toastui-editor-all.min.js');     appendScript('https://cdnjs.cloudflare.com/ajax/libs/lity/2.4.0/lity.min.js');    appendStyle('https://cdnjs.cloudflare.com/ajax/libs/lity/2.4.0/lity.min.css');     appendScript('https://cdnjs.cloudflare.com/ajax/libs/micromodal/0.4.6/micromodal.min.js', function(){     appendStyle('https://softr-assets-eu-shared.s3.eu-central-1.amazonaws.com/softr-libs/airtable-record-editor/0.0.1/softr-airtable-record-editor.min.css?t=' + getCurrentTimestamp());     appendScript('https://softr-assets-eu-shared.s3.eu-central-1.amazonaws.com/softr-libs/airtable-record-editor/0.0.1/softr-airtable-record-editor.min.js?t=' + getCurrentTimestamp());    });       setTimeout(() => {    if (!checkForLinkedListExistence() || isInStudio()) {      getAndRenderAirtableData();      return;    }     if (checkForLinkedListExistence() && !isInStudio()) {      if (recordId) {     checkRecordExistenceInInterval(recordId);      } else {     extractDetailBlockRecordId((recId) => {       if (recId) {      checkRecordExistenceInInterval(recId);       }     });       }    }      }, 200);     initAirtableEditor();    function initAirtableEditor() {     setInterval(function(){      if(!window['SoftrAirtableRecordEditor']) {       return;      }       $('#list0 .js-list-item').each(function(){       if($(this).attr('data-editor-status') === 'attached') {        return;       }       const recordId = $(this).attr('data-recordid');       console.log(recordId);        if(!recordId) {        return;       }        if(!$('#list0 .js-list-item[data-recordid="'+recordId+'"]').length) {        return;       }        const editor = SoftrAirtableRecordEditor.newInstance({        blockUUID: blockId,        blockId: 'list0',        blockMetaData: window['list0'],        type: 'list',        recordId: recordId,        user: window.logged_in_user,        onSuccess: (data) => {         console.log(data);         console.log('Refresh');         renderSingleAirtableRecord(data);        },        onError: () => {},        isRecordsStringFormatted: true       });       editor.bind();       $(this).attr('data-editor-status', 'attached');      });     }, 300);    }     function refreshAfterUpdate() {     const recordId = getUrlParam('recordId');     getAirtableData(       function (_res, _options) {        hideLoader();        renderAirtableData(_res, _options);       },       {renderMockData: true},       recordId     );    }    });  });    function checkRecordExistenceInInterval(recordId) {  /*check 10 seconds if details block in not visible then hide current block, linked-list case*/  let i = 0;  let recInterval = setInterval(() => {    i += 1;    if (window['records'] && window['records'].hasOwnProperty(recordId)) {   clearInterval(recInterval);   getAndRenderAirtableData();    }    if (i === 25) {   /*hide list block if detailBlock are not visible*/   console.log('hide list block if detailBlock are not visible, linked-list case');   showErrorToastr('Incorrect Setup: Check the Conditional Filters in your dynamic blocks.');   clearInterval(recInterval);   hideMainBlock();    }  }, 400);   }    function getAndRenderAirtableData() {  getAirtableData(function (_res, _options) {    hideLoader();    renderAirtableData(_res, _options);  }, {renderMockData: true});   }    function hideMainBlock() {  $('#list0').hide()   }   function loaddoTJs(callback) {   appendScript(    'https://cdnjs.cloudflare.com/ajax/libs/dot/1.1.2/doT.min.js',    callback   );  }   function setupdotJs() {   if (!window['doT']) {    return;   }   doT.templateSettings = {    evaluate: /\[\[([\s\S]+?)\]\]/g,    interpolate: /\[\[=([\s\S]+?)\]\]/g,    encode: /\[\[!([\s\S]+?)\]\]/g,    use: /\[\[#([\s\S]+?)\]\]/g,    define: /\[\[##\s*([\w\.$]+)\s*(\:|=)([\s\S]+?)#\]\]/g,    conditional: /\[\[\?(\?)?\s*([\s\S]*?)\s*\]\]/g,    iterate: /\[\[~\s*(?:\]\]|([\s\S]+?)\s*\:\s*([\w$]+)\s*(?:\:\s*([\w$]+))?\s*\]\])/g,    varname: 'it',    strip: true,    append: true,    selfcontained: false   };    if (!window['doT']) {    return;   }  }   function loadShowdownJs(callback) {   appendScript(    'https://cdnjs.cloudflare.com/ajax/libs/showdown/1.9.1/showdown.min.js',    callback   );  }   function renderMockData() {   const tmpl = doT.template($('#template_list0_single_item').text());   const converter = new showdown.Converter();   converter.setOption('tasklists', true);    const data = {};    fieldsSetup.forEach(fSetup => {    if (fSetup.field.type === 'rich_text') {     data[fSetup.field.id] = {      value: converter.makeHtml(getRecordValue(null, fSetup, collectionSetup.mockData[0][fSetup.field.type].value))     }    } else if (fSetup.field.type === 'tag' || fSetup.field.type === 'file') {      const value = getRecordValue(null, fSetup, collectionSetup.mockData[0][fSetup.field.type].value);     let arrayValue = [];     if (!isArray(value)) {      if (isString(value) && value.includes(', ')) {       arrayValue = extractAirtableTags(value);      } else {       arrayValue = [value];      }     } else {      arrayValue = value     }     data[fSetup.field.id] = {      value: arrayValue.filter(x => x.toString().trim())     }    } else {     data[fSetup.field.id] = {      value: getRecordValue(null, fSetup, collectionSetup.mockData[0][fSetup.field.type].value)     }    }    });   data['clickAction'] = {};   if ((collectionSetup.listItemClickAction.selectedActionType === 'OPEN_DYNAMIC_EXTERNAL_URL' ||    collectionSetup.listItemClickAction.selectedActionType === 'OPEN_DETAILS_PAGE')) {    attachBoxClickAction(data);   }   const html = tmpl(data);   $(listContainerSelector).html(html.repeat(3));    $(window).width() > 768 && adjustHeights();    attachButtonItemClickHandler();  }   function attachBoxClickAction(data) {   const mappedFieldName = collectionSetup.listItemClickAction.action.options.url.mappedTo;   const clickDestination = collectionSetup.listItemClickAction.action.options.url.destination;   const target = collectionSetup.listItemClickAction.action.options.url.target;   if (mappedFieldName) {    if (isString(data.record.fields[mappedFieldName])) {     data['clickAction'] = {      url: linkify(data.record.fields[mappedFieldName]),      enabled: true,      target: target     }    } else {     data['clickAction'] = {      url: '',      enabled: true,      target: target     }    }   } else if (clickDestination) {    data['clickAction'] = {     url: clickDestination,     enabled: true,     target: target    }   }  }   function startMagnificCPopup() {   $('.sw-image-thumbnail-gallery').each(function () {    $(this).magnificPopup({     type: 'image',     delegate: 'a',     gallery: {      enabled: true     },    });   })  }   function appendScript(filePath, callback) {   if ($('head script[src="' + filePath + '"]').length > 0) {    if (callback) {     setTimeout(callback, 100);    }    return;   }    const ds = document.createElement('script');   ds.setAttribute("type", "text/javascript");   ds.setAttribute("src", filePath);    ds.onload = () => {    if (callback) callback();   };    document.head.appendChild(ds);  }   function extractAirtableTags(value) {   const foundSubstrings = value.match(/"(.*?)"/g);   if(foundSubstrings) {    foundSubstrings.forEach(val => {     var valWithoutQuotes = val;     if(val.startsWith("\"")) {      valWithoutQuotes = valWithoutQuotes.substring(1);     }     if(val.endsWith("\"")) {      valWithoutQuotes = valWithoutQuotes.substring(0, valWithoutQuotes.length - 1);     }     value = value.replace(val, valWithoutQuotes);     value = value.replace(valWithoutQuotes, valWithoutQuotes.replace(',', ';'));    });   }    let splitted = value.split(',');   splitted = splitted.map(split => split.replace(';', ',').trim());   return splitted;  }   function appendStyle(filepath) {   if ($('head link[href="' + filepath + '"]').length > 0)    return;    const ele = document.createElement('link');   ele.setAttribute("type", "text/css");   ele.setAttribute("rel", "Stylesheet");   ele.setAttribute("href", filepath);   $('head').append(ele);  }   function renderAirtableData(result, options) {   if (!result || !result.records || !result.records.length) {    if (options && options.renderMockData) {     $(emptyStateSelector).addClass('d-none');     renderMockData();    } else {     $(emptyStateSelector).removeClass('d-none');     hideLoadMoreButton();    }    $(loadMoreButtonSelector).removeAttr('data-offset');    return;   }   $(emptyStateSelector).addClass('d-none');   const converter = new showdown.Converter();   converter.setOption('tasklists', true);   const template = doT.template($('#template_list0_single_item').text());   let html = '';   for (let i = 0; i < result.records.length; i++) {    var data = convertRecord(result.records[i], converter);    if (!data) {     continue;    }    data['clickAction'] = {};    if ((collectionSetup.listItemClickAction.selectedActionType === 'OPEN_DYNAMIC_EXTERNAL_URL' ||     collectionSetup.listItemClickAction.selectedActionType === 'OPEN_DETAILS_PAGE')) {     attachBoxClickAction(data);    }    html += template(data);     if (!window['records']) {     window['records'] = {};    }    window['records'][data['recordId']] = data;   }   if (options && options.append) {    $(listContainerSelector).append(html);   } else {    $(listContainerSelector).html(html);   }    /*attachListItemClickHandler();*/   if (result.offset) {    showLoadMoreButton();    $(loadMoreButtonSelector).attr('data-offset', result.offset);   } else {    $(loadMoreButtonSelector).removeAttr('data-offset');    hideLoadMoreButton();   }    /* Show first item as open */   if (isInStudio()) {    console.log('In Studio');    /* ToDo is expand */    $(listContainerSelector + ' .box').first().addClass('active');   }   startMagnificCPopup();    $(window).width() > 768 && adjustHeights();    attachButtonItemClickHandler();  }   function convertRecord(record, converter) {   if (!record.fields || JSON.stringify(record.fields) === '{}') {    return null;   }    const result = {    recordId: record.id,    record: record   };    if (fieldsSetup && fieldsSetup.length) {     fieldsSetup.forEach(fSetup => {     if (fSetup.field.type === 'rich_text') {      let richTextValue = converter.makeHtml(getRecordValue(record, fSetup, collectionSetup.mockData[0][fSetup.field.type].value));      if (richTextValue && richTextValue.length > 300) {       richTextValue = truncateHtml(richTextValue,297)      }      result[fSetup.field.id] = {       value: richTextValue      }     } else if (fSetup.field.type === 'tag' || fSetup.field.type === 'file') {      const value = getRecordValue(record, fSetup, collectionSetup.mockData[0][fSetup.field.type].value);      let arrayValue = [];      if (!isArray(value)) {       if (isString(value) && value.includes(', ')) {        arrayValue = extractAirtableTags(value);       } else {        arrayValue = [value];       }      } else {       arrayValue = value      }      result[fSetup.field.id] = {       value: arrayValue.filter(x => x.toString().trim())      }     } else {      let value = getRecordValue(record, fSetup, collectionSetup.mockData[0][fSetup.field.type].value);      if(!isArray(value)) {       value = value.toString();      }      result[fSetup.field.id] = {       value: value      }     }    });   }    return result;  }   function trimArrayElementsBrackets(value) {   if(value) {    for (let i = 0; i < value.length; i++) {     removeBrackets(value[i]);    }   }  }   function removeBrackets(value) {   if(value.toString().startsWith("\"")) {    value = value.toString().substr(1);   }   if(value.toString().endsWith("\"")) {    value = value.toString().substr(0, value.length - 1)   }   return value;  }   function getRecordValue(record, el, mockValue) {    if (!el.field.mappedTo && el.field.type === 'button' && el.field.action.options.url.destination) {    return el.field.action.options.url.destination;   }    if (!el.field || !record || !el.field.mappedTo) {    return mockValue;   }    let value = getJsonObjectByKey(record.fields, el.field.mappedTo);    if (el.label.value && (el.field.type === 'rich_text' || el.field.type === 'text' || el.field.type === 'heading1' ||    el.field.type === 'heading2' || el.field.type === 'heading3')) {    if (!value) {     return '-'    }   }    if (el.field.type === 'text' || el.field.type === 'heading1' ||    el.field.type === 'heading2' || el.field.type === 'heading3') {    if (value && value.length > 120) {     return value.slice(0, 117) + '...'    }   }    if (el.field.type === 'staticImage') {    if (isAirtableAttachment(value)) {     const staticImage = extractAirtableAttachmentURLs(value);     return staticImage.length > 0 ? staticImage[0].url : '';    } else {     return value ? value : '';    }   }    if ((el.field.type === 'image')) {    if (isAirtableAttachment(value)) {     return extractAirtableAttachmentURLs(value).map(val => {      return val.url;     });    } else {     return value ? [value] : [];    }   }    if (el.field.type === 'gallery') {    if (isAirtableAttachment(value)) {     return extractAirtableAttachmentURLs(value).map(val => val.url);    } else {     return value ? [value] : '';    }   }   if (el.field.type === 'file' && isAirtableAttachment(value)) {    return extractAirtableAttachmentURLs(value).map(val => {     return {url: val.url, filename: val.filename}    });   }   if (el.field.type === 'video') {    if(isAirtableAttachment(value)){     const video = extractAirtableAttachmentURLs(value);     return video.length > 0 ? video[0].url : ''    } else {     return value || ''    }   }   if (el.field.type === 'audio' && isAirtableAttachment(value)) {    const audio = extractAirtableAttachmentURLs(value);    return audio.length > 0 ? audio[0].url : '';   }    if (el.field.type === 'rich_text' || el.field.type === 'text' ||    el.field.type === 'heading1' || el.field.type === 'heading2' ||    el.field.type === 'heading3') {    if (isArray(value)) {     trimArrayElementsBrackets(value);     return value.join(', ');    }    return value && value.toString() ? removeBrackets(value).toString() : '';   }    if (el.field.type === 'button' || el.field.type === 'url') {    if (isString(value)) {     return linkify(value);    }   }    return value ? value : '';  }   function getAirTableApiUrl() {   const baseId = (window['list0'] && window['list0']['baseId']) || collectionSetup.dataSource.airtable.baseId;   const tableName = collectionSetup.dataSource.airtable.tableName;   const applicationId = $('body > div.content').attr('data-appid') || collectionSetup.dataSource.softr.applicationId;    if (window.location.href.startsWith('file:///')) {    return 'https://localhost:8080/v1/integrations/airtable/' + applicationId + '/' + baseId + '/' + tableName + '/records?block_id=' + blockId;   }   if (window.location.href.startsWith('https://localhost:')) {    return 'https://localhost:8080/v1/integrations/airtable/' + applicationId + '/' + baseId + '/' + tableName + '/records?block_id=' + blockId;   }   if (window.location.href.startsWith('https://studio-staging.softr.io/')) {    return 'https://studio-api-staging.softr.io/v1/integrations/airtable/' + applicationId + '/' + baseId + '/' + tableName + '/records?block_id=' + blockId;   }   if (window.location.href.startsWith('https://studio-staging02.softr.io/')) {    return 'https://studio-api-staging02.softr.io/v1/integrations/airtable/' + applicationId + '/' + baseId + '/' + tableName + '/records?block_id=' + blockId;   }   if (window.location.href.startsWith('https://studio-staging03.softr.io/')) {    return 'https://studio-api-staging03.softr.io/v1/integrations/airtable/' + applicationId + '/' + baseId + '/' + tableName + '/records?block_id=' + blockId;   }   if (window.location.href.startsWith('https://studio.softr.io/')) {    return 'https://studio-api.softr.io/v1/integrations/airtable/' + applicationId + '/' + baseId + '/' + tableName + '/records?block_id=' + blockId;   }   if (window.location.href.includes('preview.staging')) {    return 'https://' + window.location.hostname + '/v1/integrations/airtable/' + applicationId + '/' + baseId + '/' + tableName + '/records?block_id=' + blockId;   }   if (window.location.href.includes('preview.softr.io/')) {    return 'https://' + window.location.hostname + '/v1/integrations/airtable/' + applicationId + '/' + baseId + '/' + tableName + '/records?block_id=' + blockId;   } else {    return 'https://' + window.location.hostname + '/v1/integrations/airtable/' + applicationId + '/' + baseId + '/' + tableName + '/records?block_id=' + blockId;   }  }   function isInStudio() {   return window.location.href.startsWith('https://localhost:') ||    window.location.href.includes('https://studio-staging') ||    window.location.href.startsWith('https://studio.softr.io/')  }   function getAirtableData(callback, options) {   const url = getAirTableApiUrl();   const baseId = (window['list0'] && window['list0']['baseId']) || collectionSetup.dataSource.airtable.baseId;   const tableName = collectionSetup.dataSource.airtable.tableName;   const applicationId = $('body > div.content').attr('data-appid') || collectionSetup.dataSource.softr.applicationId;   const itemsPerPage = collectionSetup.itemsPerPage || 10;   let sorting = null;   if (collectionSetup.sortOptions[0].field) {    sorting = [{     field: collectionSetup.sortOptions[0].field,     direction: collectionSetup.sortOptions[0].direction    }];   }   if (!url || !baseId || !tableName || !applicationId) {    renderMockData();    return;   }    const params = {    page_size: itemsPerPage   };    if (collectionSetup.dataSource.airtable.viewName) {    params['view'] = collectionSetup.dataSource.airtable.viewName;   }    if (options && options.offset) {    params['offset'] = options.offset;   }     const filtersList = [];    if (options && options.searchFormula) {    filtersList.push(options.searchFormula);   }    if (options && options.filterFormula) {    filtersList.push(options.filterFormula);   }    const hasCustomFilter = collectionSetup.customFilters.conditions && collectionSetup.customFilters.conditions.length;   if (!isInStudio()) {    if (hasCustomFilter) {     filtersList.push(getCustomFilterFormula());    }    options['renderMockData'] = false;   }    if (filtersList.length === 1) {    params['filter_by_formula'] = filtersList[0]   } else if (filtersList.length > 1) {    params['filter_by_formula'] = `AND(${filtersList.join(', ')})`   }    if (sorting) {    params['sort_resources'] = sorting;   }    params['rows'] = $('#list0 .js-list-item').length;    params['airtable_response_formatting'] = {};   params['airtable_response_formatting']['format'] = 'string';    $.ajax({    url: url,    type: 'POST',    dataType: 'json',    contentType: 'application/json; charset=utf-8',    data: JSON.stringify(params),    success: function (res) {     callback(res, options);    },    error: function (error) {     console.log('Error');     console.log(error);     if (error && error.responseJSON && error.responseJSON.message) {      showErrorToastr(error.responseJSON.message);     }     callback();    }   });  }   function showErrorToastr(msg) {   toastr.options = {    "closeButton": true,    "debug": false,    "newestOnTop": false,    "progressBar": true,    "positionClass": "toast-bottom-left",    "preventDuplicates": true,    "onclick": null,    "showDuration": "300",    "hideDuration": "1000",    "timeOut": "45000",    "extendedTimeOut": "90000",    "showEasing": "swing",    "hideEasing": "linear",    "showMethod": "fadeIn",    "hideMethod": "fadeOut"   };   toastr["error"](msg, "Something went wrong!")  }   function loadMore() {   $(loadMoreButtonSelector + ' .sw-btn-spinner').removeClass('d-none');   const options = {};   const offset = $(loadMoreButtonSelector).attr('data-offset');   if (offset) {    options['offset'] = offset;   }    const keyword = $(searchInputSelector).attr('data-search-keyword');   if (keyword) {    options['searchFormula'] = getSearchFormula(keyword);   }    const hasActiveFilter = $(listFilterSelector + ' .js-filter-option.active').length;    if (hasActiveFilter) {    options['filterFormula'] = getFilterFormula();   }    getAirtableData(function (_res, _options) {    _options['append'] = true;    renderAirtableData(_res, _options);   }, options);    setTimeout(function () {    $(loadMoreButtonSelector + ' .sw-btn-spinner').addClass('d-none');   }, 500);  }   function hideLoadMoreButton() {   $(loadMoreButtonSelector).addClass('d-none');   $(loadMoreButtonSelector).removeClass('sw-display-inline-block');  }   function showLoadMoreButton() {   $(loadMoreButtonSelector).addClass('sw-display-inline-block');   $(loadMoreButtonSelector).removeClass('d-none');  }   function initSelectPickers() {   if ($('#list0 select').selectpicker) {    $('#list0 select').show();    $('#list0 select').selectpicker();   } else {    const existCondition = setInterval(function () {     if ($('#list0 select').selectpicker) {      $('#list0 select').show();      $('#list0 select').selectpicker();      clearInterval(existCondition);     }    }, 100);   }  }   function performSearch(keyword) {   const previousKeyword = $(searchInputSelector).attr('data-search-keyword') || "";    if (!keyword) {    $(searchInputSelector).attr('data-search-keyword', '');    let options = {};    const hasActiveFilter = $(listFilterSelector + ' .js-filter-option.active').length;    const hasActiveDropDownFilter = $('select.active').length;     if (hasActiveFilter || hasActiveDropDownFilter) {     options['filterFormula'] = getFilterFormula();    }     if (previousKeyword) {     showLoader();     getAirtableData(function (_res, _options) {      hideLoader();      renderAirtableData(_res, _options);     }, options);    }    return;   } else {    if (keyword.trim().toLowerCase() === previousKeyword.trim().toLowerCase()) {     return;    }    const options = {     searchFormula: getSearchFormula(keyword)    };     const hasActiveFilter = $(listFilterSelector + ' .js-filter-option.active').length;    const hasActiveDropDownFilter = $('select.active').length;     if (hasActiveFilter || hasActiveDropDownFilter) {     options['filterFormula'] = getFilterFormula();    }     $(searchInputSelector).attr('data-search-keyword', keyword.trim());    showLoader();    getAirtableData(function (_res, _options) {     _options['renderMockData'] = false;     hideLoader();     renderAirtableData(_res, _options);    }, options);   }  }   function attachFilterListeners() {   const filters = $(listFilterSelector);   filters.each(function () {    const filter = $(this);    const multiselect = ($(this).attr('data-multiselect') === 'true');    const showall = ($(this).attr('data-showall') === 'true');    const mappedto = $(this).attr('data-mappedto');     $(this).find('.js-filter-option').click(function () {     attachFilterTogglingStyles(filter, $(this), multiselect);     if (!mappedto) {      return;     }     performFilter();    });      $(this).find('select.sw-filter-dropdown').change(function (e) {     e.stopPropagation();     if (!mappedto) {      return;     }     if ($(this).val() !== 'null') {      $(this).addClass('active')     } else {      $(this).removeClass('active')     }     performFilter();    });     });  }   function attachFilterTogglingStyles(filter, filterOption, multiselect) {   const clickedFilter = filterOption;   const wasClickedFilterActive = filterOption.hasClass('active');   const clickedFilterStyle = filterOption.attr('style');    if (!multiselect) {    filter.find('.js-filter-option').removeClass('active');    filter.find('.js-filter-option').attr('style');    filter.find('.js-filter-option').attr('style', '');   }    if (!wasClickedFilterActive && !multiselect) {    filterOption.toggleClass('active');   } else if (multiselect) {    filterOption.toggleClass('active');   }    const classList = filterOption.attr('class').split(/\s+/);   let hoverBgColor = classList.find(function (clazz) {    return clazz.startsWith('hover:sw-background-color-');   });    let textColor = classList.find(function (clazz) {    return clazz.startsWith('sw-text-color-');   });    if (!hoverBgColor || !textColor) {    return;   }    hoverBgColor = '#' + hoverBgColor.replace('hover:sw-background-color-', '');   textColor = '#' + textColor.replace('sw-text-color-', '');    if (filterOption.hasClass('active')) {    filterOption.attr('style', 'background-color: ' + hoverBgColor + ' !important;' +     ' color: ' + textColor + ' !important;');   } else {    filterOption.attr('style');    filterOption.attr('style', '');   }  }   function performFilter() {   const options = {};    const keyword = $(searchInputSelector).attr('data-search-keyword');   if (keyword) {    options['searchFormula'] = getSearchFormula(keyword);    options['renderMockData'] = false;   }    const hasActiveFilter = $(listFilterSelector + ' .js-filter-option.active').length;   const hasActiveDropDownFilter = $('select.active').length;    if (hasActiveFilter || hasActiveDropDownFilter) {    options['filterFormula'] = getFilterFormula();   }    showLoader();   getAirtableData(function (_res, _options) {    hideLoader();    renderAirtableData(_res, _options);   }, options);  }   function getSearchFormula(keyword) {   const searchOptions = collectionSetup.searchOptions;   if (!searchOptions.fields.length) {    return null;   }   const searchFormulas = [];   searchOptions.fields.forEach(function (field) {    if (field) {     searchFormulas.push('SEARCH("' + keyword.trim().toLowerCase() + '", LOWER(ARRAYJOIN({' + field + '})))');    }   });   if (searchFormulas.length === 1) {    return searchFormulas[0];   }   return 'OR(' + searchFormulas.join(',') + ')';  }   function getFilterFormula() {   const allFilterFormulas = [];   const filters = $(listFilterSelector);    /* ToDo multiple filters */   filters.each(function () {    const filter = $(this);    const mappedto = $(this).attr('data-mappedto');    const filterFormulas = [];     $(this).find('.js-filter-option.active').each(function () {     var keyword = $(this).attr('data-value').trim();     let searchFormula = 'SEARCH(",' + keyword.toLowerCase() + ',", "," & SUBSTITUTE(LOWER(ARRAYJOIN({' + mappedto + '}) & ","), ", ", ","))';     if(keyword.indexOf(',') !== -1) {      searchFormula = 'SEARCH("' + keyword.toLowerCase() + '", "," & LOWER(ARRAYJOIN({' + mappedto + '}) & ","))';     }     filterFormulas.push(searchFormula);    });     $(this).find('select.sw-filter-dropdown.active').each(function (e) {     let value = $(this).val();      if (isArray(value)) {      value = value.filter( word => word !== 'null');      value = value.map( word => word.trim());      value.forEach( keyword => {       let searchFormula = 'SEARCH(",' + keyword.toLowerCase() + ',", "," & SUBSTITUTE(LOWER(ARRAYJOIN({' + mappedto + '}) & ","), ", ", ","))';       if(keyword.indexOf(',') !== -1) {        searchFormula = 'SEARCH("' + keyword.toLowerCase() + '", "," & LOWER(ARRAYJOIN({' + mappedto + '}) & ","))';       }       filterFormulas.push(searchFormula);      });     } else if(value.trim()) {      const keyword = value.trim();      let searchFormula = 'SEARCH(",' + keyword.toLowerCase() + ',", "," & SUBSTITUTE(LOWER(ARRAYJOIN({' + mappedto + '}) & ","), ", ", ","))';      if(keyword.indexOf(',') !== -1) {       searchFormula = 'SEARCH("' + keyword.toLowerCase() + '", "," & LOWER(ARRAYJOIN({' + mappedto + '}) & ","))';      }      filterFormulas.push(searchFormula);     }      console.log($(this).val());    });     if (filterFormulas.length > 0) {     const filterFormulaStr = 'OR(' + filterFormulas.join(',') + ')';     allFilterFormulas.push(filterFormulaStr);    }   });    if (allFilterFormulas.length === 1) {    return allFilterFormulas[0];   }   return 'AND(' + allFilterFormulas.join(',') + ')';  }   function getCustomFilterFormula() {   const filterFormulas = [];   const customFilter = collectionSetup.customFilters;   const logicalOperator = customFilter.logical_operator;     customFilter.conditions.forEach(function (filter) {    let filterValue = null;    const filterField = filter.subject.field;    const filterOperator = filter.operator;     /* Filter use case user attributes */    if (filter.value.length === 1 && filter.value[0].includes('USER:::')) {     filterValue = resolveUserFilterValue(filter.value[0]);    } else if (filter.value.length === 1 && filter.value[0].includes('LINKED-LIST:::')) {     filterValue = resolveUserLinkedListFilterValue(filter.value[0]);    } else if (filter.value.length) {     /* TODO Multiple values for one off and none off */     filterValue = filter.value.length === 1 ? filter.value[0] : filter.value;    }     switch (filterOperator) {     case 'IS':      filterFormulas.push(`(LOWER("${filterValue}") = LOWER(ARRAYJOIN({${filterField}})))`);      break;     case 'IS_NOT':      filterFormulas.push(`NOT(LOWER("${filterValue}") = LOWER(ARRAYJOIN({${filterField}})))`);      break;     case 'IS_EMPTY':      filterFormulas.push(`IF({${filterField}}, 0, 1)`);      break;     case 'IS_NOT_EMPTY':      filterFormulas.push(`IF({${filterField}}, 1, 0)`);      break;     case 'IS_ONE_OF':      const oneOfFilterFormulas = [];      if (filterValue) {       if (!isArray(filterValue)) {        filterValue = [filterValue];       }       filterValue.forEach(value => {        let resolvedValue = null;        if (value.includes('USER:::') || value.includes('LINKED-LIST:::')) {         resolvedValue = value.includes('USER:::') ? resolveUserFilterValue(value) : resolveUserLinkedListFilterValue(value);         if (isArray(resolvedValue)) {          resolvedValue.forEach(rv => {           oneOfFilterFormulas.push(`SEARCH(LOWER("${rv}"), LOWER(ARRAYJOIN({${filterField}})))`);          });         } else {          oneOfFilterFormulas.push(`SEARCH(LOWER("${resolvedValue}"), LOWER(ARRAYJOIN({${filterField}})))`);         }        } else {         oneOfFilterFormulas.push(`SEARCH(LOWER("${value}"), LOWER(ARRAYJOIN({${filterField}})))`);        }       });      } else {       oneOfFilterFormulas.push(`SEARCH(LOWER("${filterValue}"), LOWER(ARRAYJOIN({${filterField}})))`);      }      if (oneOfFilterFormulas.length === 1) {       filterFormulas.push(oneOfFilterFormulas[0]);      } else if (oneOfFilterFormulas.length > 1) {       filterFormulas.push(`OR(${oneOfFilterFormulas.join(',')})`);      }      break;     case 'IS_NONE_OF':      const noneOfFilterFormulas = [];      if (filterValue) {       if (!isArray(filterValue)) {        filterValue = [filterValue];       }       filterValue.forEach(value => {        let resolvedValue = null;        if (value.includes('USER:::') || value.includes('LINKED-LIST:::')) {         resolvedValue = value.includes('USER:::') ? resolveUserFilterValue(value) : resolveUserLinkedListFilterValue(value);         if (isArray(resolvedValue)) {          resolvedValue.forEach(rv => {           noneOfFilterFormulas.push(`NOT(SEARCH(LOWER("${rv}"), LOWER(ARRAYJOIN({${filterField}}))))`);          });         } else {          noneOfFilterFormulas.push(`NOT(SEARCH(LOWER("${resolvedValue}"), LOWER(ARRAYJOIN({${filterField}}))))`);         }        } else {         noneOfFilterFormulas.push(`NOT(SEARCH(LOWER("${value}"), LOWER(ARRAYJOIN({${filterField}}))))`);        }       });      } else {       noneOfFilterFormulas.push(`NOT(SEARCH(LOWER("${filterValue}"), LOWER(ARRAYJOIN({${filterField}}))))`);      }      if (noneOfFilterFormulas.length === 1) {       filterFormulas.push(noneOfFilterFormulas[0]);      } else if (noneOfFilterFormulas.length > 1) {       filterFormulas.push(`AND(${noneOfFilterFormulas.join(',')})`);      }      break;     default:      break;    }     });    if (filterFormulas.length === 1) {    return filterFormulas[0];   } else if (filterFormulas.length > 1) {    return `${logicalOperator}(${filterFormulas.join(',')})`;   }   return '';  }   function resolveUserFilterValue(value) {   if (value === '{USER:::EMAIL}') {    return getUserEmail();   } else if (value === '{USER:::EMAIL_DOMAIN}') {    const email = getUserEmail();    return email.split('@')[1];   } else if (value.startsWith('USER:::')) {    const userAttribute = value.split(':::')[1];    if (window['logged_in_user'] && window['logged_in_user'][userAttribute]) {     return window['logged_in_user'][userAttribute];    }   }   return null;  }   function checkForLinkedListExistence() {   const hasCustomFilter = collectionSetup.customFilters.conditions && collectionSetup.customFilters.conditions.length;   return hasCustomFilter && collectionSetup.customFilters.conditions.some((filter) => filter.value[0] && filter.value[0].includes('LINKED-LIST:::'));  }   function resolveUserLinkedListFilterValue(value) {   const linkedTableField = value.split(':::')[2].trim();   if (recordId && window['records'] && window['records'].hasOwnProperty(recordId) && window['records'][recordId].record.fields[linkedTableField]) {    let value = window['records'][recordId].record.fields[linkedTableField];    if (isString(value) && value.includes(', ')) {     return extractAirtableTags(value);    }    return value;   }   return null;  }    function extractDetailBlockRecordId(callback) {  let i = 0;  let recInterval = setInterval(() => {    i += 1;    const detailBlock = $('section[id^="list-details"]').is(':visible') ? $('section[id^="list-details"]') : null;    if (detailBlock && detailBlock[0].querySelector('div[class="sw-js-single-item-elements"]')) {   clearInterval(recInterval);   recordId = detailBlock[0].querySelector('div[class="sw-js-single-item-elements"]').getAttribute('data-recordId');   callback && callback(recordId);    }     if (i === 25) {   /*hide list block if detailBlock are not visible*/   console.log('hide list block if detailBlock are not visible, linked-list case');   showErrorToastr('Incorrect Setup: Check the Conditional Filters in your dynamic blocks.');   clearInterval(recInterval);   hideMainBlock();   callback && callback(null);    }  }, 400);   }   function getUrlParam(name) {   const url = new URL(window.location.href);   let param;   for(const key of url.searchParams.keys()) {    if(key.toLowerCase() === name.toLowerCase()) {     param = url.searchParams.get(name);     break;    }   }    if(!param && name.toLowerCase() === 'recordid') {    param = getRecordIdFromPath();   }   return param;  }   function getRecordIdFromPath() {   let pathName = window.location.pathname;   if (pathName.indexOf('/r/rec') !== -1) {    pathName = pathName.substr(pathName.indexOf('/r/rec') + 3);    if (pathName.indexOf("/") !== -1) {     pathName = pathName(0, pathName.indexOf('/'))    }    return pathName;   }   return undefined;  }   function getUserEmail() {   const token = getCookie('jwtToken');   if (token) {    var userData = parseJwt(token);    if (userData && userData.sub) {     return userData.sub.toLowerCase();    }   }   return null;  }   function parseJwt(token) {   var base64Url = token.split('.')[1];   var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');   var jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);   }).join(''));    return JSON.parse(jsonPayload);  }   function getCookie(cookieName) {   var name = cookieName + "=";   var decodedCookie = decodeURIComponent(document.cookie);   var ca = decodedCookie.split(';');   for (var i = 0; i < ca.length; i++) {    var c = ca[i];    while (c.charAt(0) == ' ') {     c = c.substring(1);    }    if (c.indexOf(name) == 0) {     return c.substring(name.length, c.length);    }   }   return "";  }   function showLoader() {   $(listContainerSelector).empty();   $(listContainerSelector).html('<div class="row"><div class="col-12"><div class="loading-line"></div></div></div>');   $(listContainerSelector).append('<div class="row"><div class="col-12"><div class="loading-line"></div></div></div>');   $(listContainerSelector).append('<div class="row"><div class="col-12"><div class="loading-line"></div></div></div>');   $(listContainerSelector).append('<div class="row"><div class="col-12"><div class="loading-line"></div></div></div>');   $(listContainerSelector).append('<div class="row"><div class="col-12"><div class="loading-line"></div></div></div>');   $(listContainerSelector).append('<div class="row"><div class="col-12"><div class="loading-line"></div></div></div>');   $(listContainerSelector).append('<div class="row"><div class="col-12"><div class="loading-line"></div></div></div>');   $(listContainerSelector).append('<div class="row"><div class="col-12"><div class="loading-line"></div></div></div>');   $(listContainerSelector).append('<div class="row"><div class="col-12"><div class="loading-line"></div></div></div>');   $(listContainerSelector).append('<div class="row"><div class="col-12"><div class="loading-line"></div></div></div>');   $(listContainerSelector).append('<div class="row"><div class="col-12"><div class="loading-line"></div></div></div>');  }   function hideLoader() {   $(listContainerSelector).empty();  }   function isArray(value) {   return value && Array.isArray(value);  }   function isString(value) {   return typeof value === 'string';  }   function debounce(func, wait, immediate) {   var timeout;   return function () {    var context = this, args = arguments;    var later = function () {     timeout = null;     if (!immediate) func.apply(context, args);    };    var callNow = immediate && !timeout;    clearTimeout(timeout);    timeout = setTimeout(later, wait);    if (callNow) func.apply(context, args);   }  }   function getJsonObjectByKey(source, key) {   for (var prop in source) {    if (source.hasOwnProperty(prop) && key.toLowerCase() == prop.toLowerCase()) {     return source[prop];    }   }   return null;  }   function lightenOrDarkenColor(colorCode, amount) {   var usePound = false;    if (colorCode[0] == "#") {    colorCode = colorCode.slice(1);    usePound = true;   }    var num = parseInt(colorCode, 16);    var r = (num >> 16) + amount;    if (r > 255) {    r = 255;   } else if (r < 0) {    r = 0;   }    var b = ((num >> 8) & 0x00FF) + amount;    if (b > 255) {    b = 255;   } else if (b < 0) {    b = 0;   }    var g = (num & 0x0000FF) + amount;    if (g > 255) {    g = 255;   } else if (g < 0) {    g = 0;   }    return (usePound ? "#" : "") + (g | (b << 8) | (r << 16)).toString(16);  }   function linkify(url) {   if (url.startsWith('https') || url.startsWith('http') || url.startsWith('mailto') ||    url.startsWith('#') || url.startsWith('/') || url.startsWith('tel') || url.startsWith('sms')) {    return url;   }    if (url.indexOf('.') !== -1) {    return 'https://' + url;   }   return ''  }   setSearchPlaceholderColor();   function setSearchPlaceholderColor() {   if ($('#list0 .sw-js-list-search-input').length > 0) {    const classList = $('#list0 .sw-js-list-search-input').attr('class').split(/\s+/);    const textClass = classList.find(clazz => clazz.startsWith('sw-text-color-'));    if (textClass) {     const color = textClass.replace('sw-text-color-', '#');      const inlineStyle = '.sw-placeholder-color-' + color.replace('#', '') + '::-webkit-input-placeholder { color: ' + lightenOrDarkenColor(color, -90) + '; }';     $('head').append('<style>' + inlineStyle + '</style>');     $('#list0 .sw-js-list-search-input').addClass('sw-placeholder-color-' + color.replace('#', ''));    }   }  }   function isAirtableAttachment(value) {   return value && (value.indexOf('(https://') !== -1 ||  value.indexOf('(https://softr-assets-eu-') !== -1) && !value.startsWith('https://dl.airtable.com');  }   function extractAirtableAttachmentURLs(value) {   if(!value || value.indexOf('(https://') === -1) {    return [];   }   var splits = value.split('(https://');   var splitedArray = [];   for (let i = 0; i < splits.length; i++) {    if(i === 0) {     splitedArray.push(splits[0]);    } else if(i === splits.length - 1) {     splitedArray.push(splits[splits.length - 1].substring(0, splits[splits.length - 1].length - 1));    } else {     var splitText = '),';     if(splits[i].indexOf('),') === -1) {      splitText = ')"\,';     }     var next = splits[i].split(splitText);     splitedArray.push(next[0]);     splitedArray.push(next[1]);    }   }   var attachments = [];   for (let j = 0; j <= splitedArray.length - 2 ; j = j + 2) {    var name = splitedArray[j].trim();    if(name.startsWith('\"')) {     name = name.substring(1);    }    if(name.endsWith('\"')) {     name = name.substring(0, name.length - 1);    }     var url = splitedArray[j + 1].trim();    if(url.startsWith('\"')) {     url = url.substring(1);    }    if(url.endsWith('\"')) {     url = url.substring(0, url.length - 1);    }    attachments.push({filename: name, url: 'https://' + url});   }   return attachments;  }   function makeMatrix(input, columnSize) {   const matrix = [];   while (input.length) {    matrix.push(input.splice(0, columnSize));   }   return matrix;  }  function getElementHeights(elements) {   let heights = [];   elements.forEach(row => {    let rowElementHeights = [];    row.forEach(item => {     const itemElementHeights = $(item).children().map(function (i, e) {      return $(this).outerHeight(true);     }).get();     rowElementHeights.push(itemElementHeights);    });    heights.push(rowElementHeights);   });   return heights;  }  function calculateMaxHeights(elementHeights) {   let heights = [];   elementHeights.forEach(row => {    let maxHeights = row[0].slice();    row.forEach((item) => {     item.forEach((height, index) => {      if (height > maxHeights[index]) {       maxHeights[index] = height;      }     });    });    heights.push(maxHeights);   });   return heights  }  function setCalculatedHeights(elements, heights) {   elements.forEach((row, i) => {    row.forEach(element => {     $(element).children().each(function (j, subElement) {      if (!$(subElement).hasClass('sw-pre-divider-container') && !$(subElement).hasClass('sw-pre-embed-container')) {       $(this).css({'height': heights[i][j]});      }     });    });   });  }   function adjustHeights() {   const cards = document.querySelectorAll('#list0 .sw-js-list-container .sw-js-single-item-elements');   const elements = makeMatrix([...cards], collectionSetup.itemsPerRow);   setTimeout(function () {    let heights = getElementHeights(elements);    let calculatedMaxHeights = calculateMaxHeights(heights);    setCalculatedHeights(elements, calculatedMaxHeights);   }, 200);  }   function attachButtonItemClickHandler() {   $(listContainerSelector + ' .js-list-item-button').each(function (index, el) {    if ($(el).attr('href') && $(el).attr('href').startsWith('/') && !$(el).attr('href').includes('#')) {     const recordId = $(el).parents('.js-list-item').attr('data-recordid');     let url = $(el).attr('href');     if(recordId && !url.includes('?recordId=')) {      url = url + '?recordId=' + recordId;      $(this).attr('href', url);     }    }   });  }   function truncateHtml(string, maxLength, options) {   let EMPTY_OBJECT = {},    EMPTY_STRING = '',    DEFAULT_TRUNCATE_SYMBOL = '...',    DEFAULT_SLOP = 10 > maxLength ? maxLength : 10,    EXCLUDE_TAGS = ['img', 'br'],    items = [],    total = 0,    content = EMPTY_STRING,    KEY_VALUE_REGEX = '([\\w|-]+\\s*=\\s*"[^"]*"\\s*)*',    IS_CLOSE_REGEX = '\\s*\\/?\\s*',    CLOSE_REGEX = '\\s*\\/\\s*',    SELF_CLOSE_REGEX = new RegExp('<\\/?\\w+\\s*' + KEY_VALUE_REGEX + CLOSE_REGEX + '>'),    HTML_TAG_REGEX = new RegExp('<\\/?\\w+\\s*' + KEY_VALUE_REGEX + IS_CLOSE_REGEX + '>'),    URL_REGEX = /(((ftp|https?):\/\/)[\-\w@:%_\+.~#?,&\/\/=]+)|((mailto:)?[_.\w\-]+@([\w][\w\-]+\.)+[a-zA-Z]{2,3})/g,    IMAGE_TAG_REGEX = new RegExp('<img\\s*' + KEY_VALUE_REGEX + IS_CLOSE_REGEX + '>'),    WORD_BREAK_REGEX = new RegExp('\\W+', 'g'),    matches = true,    result,    index,    tail,    tag,    selfClose;    function _removeImageTag(string) {    var match = IMAGE_TAG_REGEX.exec(string),     index,     len;     if (!match) {     return string;    }     index = match.index;    len = match[0].length;     return string.substring(0, index) + string.substring(index + len);   }   function _dumpCloseTag(tags) {    var html = '';     tags.reverse().forEach(function (tag, index) {     if (-1 === EXCLUDE_TAGS.indexOf(tag)) {      html += '</' + tag + '>';     }    });     return html;   }   function _getTag(string) {    var tail = string.indexOf(' ');     if (-1 === tail) {     tail = string.indexOf('>');     if (-1 === tail) {      throw new Error('HTML tag is not well-formed : ' + string);     }    }     return string.substring(1, tail);   }   function _getEndPosition (string, tailPos) {    var defaultPos = maxLength - total,     position = defaultPos,     isShort = defaultPos < options.slop,     slopPos = isShort ? defaultPos : options.slop - 1,     substr,     startSlice = isShort ? 0 : defaultPos - options.slop,     endSlice = tailPos || (defaultPos + options.slop),     result;     if (!options.truncateLastWord) {      substr = string.slice(startSlice, endSlice);      if (tailPos && substr.length <= tailPos) {      position = substr.length;     }     else {      while ((result = WORD_BREAK_REGEX.exec(substr)) !== null) {       if (result.index < slopPos) {        position = defaultPos - (slopPos - result.index);        if (result.index === 0 && defaultPos <= 1) break;       }       else if (result.index === slopPos) {        position = defaultPos;        break;       }       else {        position = defaultPos + (result.index - slopPos);        break;       }      }     }     if (string.charAt(position - 1).match(/\s$/)) position--;    }    return position;   }    options = options || EMPTY_OBJECT;   options.ellipsis = (undefined !== options.ellipsis) ? options.ellipsis : DEFAULT_TRUNCATE_SYMBOL;   options.truncateLastWord = (undefined !== options.truncateLastWord) ? options.truncateLastWord : true;   options.slop = (undefined !== options.slop) ? options.slop : DEFAULT_SLOP;    while (matches) {    matches = HTML_TAG_REGEX.exec(string);     if (!matches) {     if (total >= maxLength) { break; }      matches = URL_REGEX.exec(string);     if (!matches || matches.index >= maxLength) {      content += string.substring(0, _getEndPosition(string));      break;     }      while (matches) {      result = matches[0];      index = matches.index;      content += string.substring(0, (index + result.length) - total);      string = string.substring(index + result.length);      matches = URL_REGEX.exec(string);     }     break;    }     result = matches[0];    index = matches.index;     if (total + index > maxLength) {     content += string.substring(0, _getEndPosition(string, index));     break;    } else {     total += index;     content += string.substring(0, index);    }     if ('/' === result[1]) {     items.pop();     selfClose=null;    } else {     selfClose = SELF_CLOSE_REGEX.exec(result);     if (!selfClose) {      tag = _getTag(result);       items.push(tag);     }    }     if (selfClose) {     content += selfClose[0];    } else {     content += result;    }    string = string.substring(index + result.length);   }    if (string.length > maxLength - total && options.ellipsis) {    content += options.ellipsis;   }   content += _dumpCloseTag(items);    if (!options.keepImageTag) {    content = _removeImageTag(content);   }    return content  }   function renderSingleAirtableRecord(result) {    var converter = new showdown.Converter();   converter.setOption('tasklists', true);   var template = doT.template($('#template_list0_single_item').text());   var html = '';   var data = convertRecord(result, converter);   if (!data) {    return;   }    data['clickAction'] = {};   if ((collectionSetup.listItemClickAction.selectedActionType === 'OPEN_DYNAMIC_EXTERNAL_URL' ||     collectionSetup.listItemClickAction.selectedActionType === 'OPEN_DETAILS_PAGE')) {    attachBoxClickAction(data);   }   html += template(data);    if (!window['records']) {    window['records'] = {};   }   window['records'][data['recordId']] = data;    $('#list0 div[data-recordid="'+data['recordId']+'"]').replaceWith(html);     startMagnificCPopup();    attachButtonItemClickHandler();    $(window).width() > 768 && adjustHeights();  }   const {category, filterValue} = findPreSelectedFilter();   if (category && filterValue) {   prefilterByCategory(category, filterValue);  }   function prefilterByCategory(category, filterValue) {   const existCondition = setInterval(function () {     let filterType = $(window).width() < 991 ? 'mobile-filter' : 'desktop-filter';     const filterCategory = $('#list0 .js-filter.' + filterType + '[data-mappedto="' + category.trim() + '"]');    const filter = $(filterCategory).find('.filter[data-value="' + filterValue.trim() + '"]');    const dropdownFilter = $(filterCategory).find('select.sw-filter-dropdown');     if (dropdownFilter.length) {     $(dropdownFilter).val(filterValue).selectpicker('render');     $(dropdownFilter).val(filterValue).trigger('change');     clearInterval(existCondition);    }     if (filter.length) {     filter.click();     clearInterval(existCondition);    }    }, 300);  }   function findPreSelectedFilter() {   const url = new URL(window.location.href);   let filterValue;   let category;   for (const key of url.searchParams.keys()) {    if (key.startsWith('filter-by-')) {     category = key.split('-')[2];     filterValue = url.searchParams.get(key).trim();    }   }   return {    category,    filterValue   }  } })();